{"version":3,"sources":["logo.svg","components/carousal/Carousal.jsx","components/product/Product.jsx","components/products/Products.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Carousal","props","useState","imageIndex","setImageIndex","timer","setInterval","length","images","clearInterval","className","data-testid","src","alt","style","product","border","padding","textAlign","borderRadius","boxShadow","margin","Product","name","price","Products","products","setProducts","useEffect","fetch","then","res","json","response","console","log","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,sLCyB5BC,MAtBf,SAAkBC,GAAQ,IAAD,EACaC,mBAAS,GADtB,mBAChBC,EADgB,KACJC,EADI,KAGjBC,EAAQC,aAAY,WACxB,IAAIC,EAASN,EAAMO,OAAOD,OAExBH,EADED,GAAcI,EAAO,EACT,EAEAJ,EAAW,GAE3BM,cAAcJ,KACb,KAEH,OACE,yBAAKK,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKC,cAAY,cAAcC,IAAKX,EAAMO,OAAOL,GAAaU,IAAI,kBCfpEC,EAAQ,CACZC,QAAS,CACPC,OAAQ,iBACRC,QAAS,OACTC,UAAW,OACXC,aAAc,SACdC,UAAW,mBACXC,OAAQ,UAgBGC,MAZf,YAA6B,IAAXP,EAAU,EAAVA,QACTQ,EAAuBR,EAAvBQ,KAAMC,EAAiBT,EAAjBS,MAAOhB,EAAUO,EAAVP,OAEpB,OACE,yBAAKE,UAAU,UAAUI,MAAOA,EAAMC,SACpC,yBAAKL,UAAU,QAAO,2BAAIa,IAC1B,yBAAKb,UAAU,SAAf,OAA4Bc,GAC5B,kBAAC,EAAD,CAAUhB,OAAQA,M,MCiBTiB,MAnCf,WAAqB,IAAD,EACcvB,mBAAS,IADvB,mBACXwB,EADW,KACDC,EADC,KAoBlB,OAlBAC,qBAAU,WAER,OAOAC,MADU,sBACC,IACVC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACRA,GACFN,EAAYM,MAZT,WACLC,QAAQC,IAAI,kBAEb,IAcD,yBAAKzB,UAAU,YACb,wCACA,yBAAKA,UAAU,sBAEXgB,EAASnB,OACTmB,EAASU,KAAI,SAACrB,EAASsB,GAAV,OACX,kBAAC,EAAD,CAASC,IAAKD,EAAOtB,QAASA,OAC3B,wCCbAwB,MAbf,WACE,OACE,yBAAK7B,UAAU,OACb,gCACE,uCAEF,8BACE,kBAAC,EAAD,SCDY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.92844f56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react'\nimport './carousal.css';\n\nfunction Carousal(props) {\n  const [imageIndex, setImageIndex] = useState(0);\n\n  const timer = setInterval(() => {\n    let length = props.images.length;\n    if (imageIndex >= length-1) {\n      setImageIndex(0);\n    } else {\n      setImageIndex(imageIndex+1);\n    }\n    clearInterval(timer);\n  }, 2000);\n\n  return (\n    <div className=\"carousal\">\n      <div className=\"container\">\n        <img data-testid=\"carousalImg\" src={props.images[imageIndex]} alt=\"loading...\" />\n      </div>\n    </div>\n  )\n}\n\nexport default Carousal\n","import React from 'react'\nimport './product.css';\nimport Carousal from '../carousal/Carousal';\n\nconst style = {\n  product: {\n    border: \"1px solid #ccc\",\n    padding: \"1rem\",\n    textAlign: \"left\",\n    borderRadius: \".25rem\",\n    boxShadow: \"2px 2px 5px #ccc\",\n    margin: \"0 4px\"\n  }\n}\n\nfunction Product({product}) {\n  const {name, price, images} = product;\n\n  return (\n    <div className=\"product\" style={style.product}>\n      <div className=\"name\"><b>{name}</b></div>\n      <div className=\"price\">INR {price}</div>\n      <Carousal images={images} />\n    </div>\n  )\n}\n\nexport default Product\n","import React, {useState, useEffect} from 'react'\nimport Product from '../product/Product';\nimport './products.css';\n\nfunction Products() {\n  const [products, setProducts] = useState([]);\n  useEffect(() => {\n    fetchProducts();\n    return () => {\n      console.log('Unmounting.')\n    }\n  }, []);\n\n  function fetchProducts() {\n    let url = \"/data/products.json\";\n    fetch(url, {})\n    .then(res => res.json())\n    .then(response => {\n      console.log(response);\n      if (response) {\n        setProducts(response);\n      }\n    });\n  }\n  return (\n    <div className=\"products\">\n      <h2>Products</h2>\n      <div className=\"products-container\">\n        {\n          products.length ?\n          products.map((product, index) => (\n            <Product key={index} product={product} />\n          )) : <></>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Products\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Products from './components/products/Products';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Aeigon</h1>\n      </header>\n      <main>\n        <Products />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}