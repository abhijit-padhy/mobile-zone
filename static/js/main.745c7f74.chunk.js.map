{"version":3,"sources":["logo.svg","components/carousal/Carousal.jsx","components/product/Product.jsx","components/products/Products.jsx","components/blackjack/Blackjack.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Carousal","props","useState","imageIndex","setImageIndex","timer","setInterval","length","images","clearInterval","className","data-testid","src","alt","style","product","border","padding","textAlign","borderRadius","boxShadow","margin","Product","name","price","Products","products","setProducts","useEffect","fetch","then","res","json","response","console","log","map","index","key","playerPoints","setPlayerPoints","dealerPoints","setDealerPoints","undefined","isDealerWon","setIsDealerWon","calculatePoints","currentPoint","_random","random1to13","onStand","forEach","document","getElementsByTagName","setAttribute","point","isPlayerValid","isDealerValid","winner","getWinner","maxWidth","onClick","marginLeft","window","location","reload","jsx","Math","ceil","random","App","to","exact","path","Blackjack","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,uNCyB5BC,MAtBf,SAAkBC,GAAQ,IAAD,EACaC,mBAAS,GADtB,mBAChBC,EADgB,KACJC,EADI,KAGjBC,EAAQC,aAAY,WACxB,IAAIC,EAASN,EAAMO,OAAOD,OAExBH,EADED,GAAcI,EAAO,EACT,EAEAJ,EAAW,GAE3BM,cAAcJ,KACb,KAEH,OACE,yBAAKK,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKC,cAAY,cAAcC,IAAKX,EAAMO,OAAOL,GAAaU,IAAI,kBCfpEC,EAAQ,CACZC,QAAS,CACPC,OAAQ,iBACRC,QAAS,OACTC,UAAW,OACXC,aAAc,SACdC,UAAW,mBACXC,OAAQ,UAgBGC,MAZf,YAA6B,IAAXP,EAAU,EAAVA,QACTQ,EAAuBR,EAAvBQ,KAAMC,EAAiBT,EAAjBS,MAAOhB,EAAUO,EAAVP,OAEpB,OACE,yBAAKE,UAAU,UAAUI,MAAOA,EAAMC,SACpC,yBAAKL,UAAU,QAAO,2BAAIa,IAC1B,yBAAKb,UAAU,SAAf,OAA4Bc,GAC5B,kBAAC,EAAD,CAAUhB,OAAQA,M,MCiBTiB,MAnCf,WAAqB,IAAD,EACcvB,mBAAS,IADvB,mBACXwB,EADW,KACDC,EADC,KAoBlB,OAlBAC,qBAAU,WAER,OAOAC,MADU,kCACC,IACVC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACRA,GACFN,EAAYM,MAZT,WACLC,QAAQC,IAAI,kBAEb,IAcD,yBAAKzB,UAAU,YACb,wCACA,yBAAKA,UAAU,sBAEXgB,EAASnB,OACTmB,EAASU,KAAI,SAACrB,EAASsB,GAAV,OACX,kBAAC,EAAD,CAASC,IAAKD,EAAOtB,QAASA,OAC3B,wC,QCVA,aAAO,IAAD,EACqBb,mBAAS,GAD9B,mBACZqC,EADY,KACEC,EADF,OAEqBtC,mBAAS,GAF9B,mBAEZuC,EAFY,KAEEC,EAFF,OAGmBxC,wBAASyC,GAH5B,mBAGZC,EAHY,KAGCC,EAHD,KAUnB,SAASC,IAAiC,IAAjBC,EAAgB,uDAAH,EAChCC,EAAUC,IACd,OAAgB,IAAZD,GAAiBD,GAAe,EAC3BA,EAAe,GAEjBA,EAAeC,EAYxB,SAASE,IACa,CAAC,EAAG,GACVC,SAAQ,SAAAb,GACpBc,SAASC,qBAAqB,UAAUf,GAAKgB,aAAa,YAAW,MAGvE,IADA,IAAIC,EAAQ,EACLA,GAAO,IACZA,EAAQT,EAAgBS,GAE1Bb,EAAgBa,GAChBV,EAQF,WAAoD,IAAjCN,EAAgC,uDAAnB,EAAGE,EAAgB,uDAAH,EAC1Ce,EAAgBjB,GAAc,GAC9BkB,EAAgBhB,GAAc,GAC9BiB,GAAS,EACTF,GAAiBC,EACnBC,EAASjB,GAAgBF,EAChBiB,IACTE,GAAS,GAEX,OAAOA,EAjBQC,CAAUpB,EAAcgB,IAoBzC,OACE,yBAAK7C,UAAU,YAAYI,MAAO,CAAC8C,SAAU,QAASvC,OAAQ,WAC5D,yCACA,yBAAKX,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SAAf,WAAgC6B,GAChC,6BACE,4BAAQsB,QA7ClB,WACMtB,GAAc,IAChBC,EAAgBM,EAAgBP,MA2C1B,OACA,4BAAQsB,QAASX,EAASpC,MAAO,CAACgD,WAAY,SAA9C,SACA,wCAAQD,QAASX,EAASpC,MAAO,CAACgD,WAAY,SAA9C,WAAgE,kBAAMC,OAAOC,SAASC,YAAtF,YAGJ,yBAAKvD,UAAU,SAAf,WAAgC+B,SAGhBE,IAAhBC,EACA,yBAAK9B,MAAO,CAACG,QAAS,SAAtB,iBAEE,8BAAO2B,EAAc,SAAW,WACzB,qCAEX,qCACO,6BADP,0BAEuB,6BAFvB,oDAGiD,6BAHjD,gDAI6C,6BAJ7C,mEAKgE,6BALhE,sCAMmC,6BANnC,iBAOc,6BAPd,sBAQmB,6BARnB,8BAS2B,6BAT3B,0CAUuC,6BAVvC,oFAWiF,6BAXjF,wLAciD,6BAdjD,uBAeoB,6BAfpB,sBAgBmB,6BAhBnB,4CAiByC,8BAEzC,2BAAOsB,KAAG,GAAV,ulBAgCOjB,EAAc,WAEzB,OAAOkB,KAAKC,KAAmB,GAAdD,KAAKE,WC/GTC,MAlCf,WACE,OACE,yBAAK5D,UAAU,OACb,kBAAC,IAAD,KACE,gCACE,2CACA,4BACE,4BACE,kBAAC,IAAD,CAAMA,UAAU,WAAW6D,GAAG,cAA9B,cAEF,4BACE,kBAAC,IAAD,CAAM7D,UAAU,WAAW6D,GAAG,aAA9B,cAGJ,8BAEF,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAACC,EAAD,YCrBMC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.745c7f74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react'\nimport './carousal.css';\n\nfunction Carousal(props) {\n  const [imageIndex, setImageIndex] = useState(0);\n\n  const timer = setInterval(() => {\n    let length = props.images.length;\n    if (imageIndex >= length-1) {\n      setImageIndex(0);\n    } else {\n      setImageIndex(imageIndex+1);\n    }\n    clearInterval(timer);\n  }, 2000);\n\n  return (\n    <div className=\"carousal\">\n      <div className=\"container\">\n        <img data-testid=\"carousalImg\" src={props.images[imageIndex]} alt=\"loading...\" />\n      </div>\n    </div>\n  )\n}\n\nexport default Carousal\n","import React from 'react'\nimport './product.css';\nimport Carousal from '../carousal/Carousal';\n\nconst style = {\n  product: {\n    border: \"1px solid #ccc\",\n    padding: \"1rem\",\n    textAlign: \"left\",\n    borderRadius: \".25rem\",\n    boxShadow: \"2px 2px 5px #ccc\",\n    margin: \"0 4px\"\n  }\n}\n\nfunction Product({product}) {\n  const {name, price, images} = product;\n\n  return (\n    <div className=\"product\" style={style.product}>\n      <div className=\"name\"><b>{name}</b></div>\n      <div className=\"price\">INR {price}</div>\n      <Carousal images={images} />\n    </div>\n  )\n}\n\nexport default Product\n","import React, {useState, useEffect} from 'react'\nimport Product from '../product/Product';\nimport './products.css';\n\nfunction Products() {\n  const [products, setProducts] = useState([]);\n  useEffect(() => {\n    fetchProducts();\n    return () => {\n      console.log('Unmounting.')\n    }\n  }, []);\n\n  function fetchProducts() {\n    let url = \"/mobile-zone/data/products.json\";\n    fetch(url, {})\n    .then(res => res.json())\n    .then(response => {\n      console.log(response);\n      if (response) {\n        setProducts(response);\n      }\n    });\n  }\n  return (\n    <div className=\"products\">\n      <h2>Products</h2>\n      <div className=\"products-container\">\n        {\n          products.length ?\n          products.map((product, index) => (\n            <Product key={index} product={product} />\n          )) : <></>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Products\n","import React, {useState} from 'react';\n\n/**\n * Problem : Create a react-app blackjack game, ensuring the following \nfunctionalities.\n-  1. shuffle the deck\n-  2. hand out 2 cards each to dealer and player\n-  2. prompt player for actions (hit, stand)\n-  3. dealer(computer) decides to draw until at least 17 points\n-  4. determine who wins the round\nAssumptions :\n* Poker Cards only\n* Rank: (A, 2-10, J,Q, K),\n* Suit : (Spade, Heart, Club, Diamond)\n* A Deck of poker cards: 52(13 rank * 4 suit) possible unique card combination, \nit's a game trying to make your hand closest to 21 points but exceeding 21 means\ngame over, whoever is highest below 22 points wins\n* assume that there's only 1 dealer and 1 player\n* 2-10: 2-10 points\n* J,Q,K: 10 points\n* A : 11/1 point (can be 11 or 1 points)\n */\nexport default () => {\n  const [playerPoints, setPlayerPoints] = useState(0);\n  const [dealerPoints, setDealerPoints] = useState(0);\n  const [isDealerWon, setIsDealerWon] = useState(undefined);\n\n  /**\n   * Used to generate and calculate total points based on given current points\n   * & business logic.\n   * @param {*} currentPoint \n   */\n  function calculatePoints(currentPoint=0) {\n    let _random = random1to13();\n    if (_random === 1 && currentPoint <=6) {\n      return currentPoint + 11;\n    }\n    return currentPoint + _random;\n  }\n\n  // Used to draw card for player\n  function onHit() {\n    if (playerPoints<=17) {\n      setPlayerPoints(calculatePoints(playerPoints))\n    }    \n  }\n\n  // Used to draw card card for dealer\n  // and calls getWinner method \n  function onStand() {\n    let buttonIndexes = [0, 1]; // 0 for hit, 1 for stand\n    buttonIndexes.forEach(key => {\n      document.getElementsByTagName('button')[key].setAttribute('disabled',true)\n    });\n    let point = 0;\n    while (point<=17) {\n      point = calculatePoints(point);\n    }\n    setDealerPoints(point);\n    setIsDealerWon(getWinner(playerPoints, point));\n  }\n\n  /**\n   * Used to predict the winner of this game\n   * @param {*} playerPoints \n   * @param {*} dealerPoints \n   */\n  function getWinner(playerPoints=0, dealerPoints=0) {\n    let isPlayerValid = playerPoints<=21;\n    let isDealerValid = dealerPoints<=21;\n    let winner = true;\n    if (isPlayerValid && isDealerValid) {\n      winner = dealerPoints >= playerPoints;\n    } else if (isPlayerValid) {\n      winner = false;\n    }\n    return winner; //dealer won if true else player won\n  }\n\n  return (\n    <div className=\"blackjack\" style={{maxWidth: \"400px\", margin: \"0 auto\"}}>\n      <h1>Blackjack</h1>\n      <div className=\"players\">\n        <div className=\"player\">\n          <div className=\"title\">Player: {playerPoints}</div>\n          <div>\n            <button onClick={onHit}>Hit</button>\n            <button onClick={onStand} style={{marginLeft: \"1rem\"}}>Stand</button>\n            <button onClick={onStand} style={{marginLeft: \"1rem\"}} onClick={() => window.location.reload()}>Reload</button>\n          </div>\n        </div>\n        <div className=\"title\">Dealer: {dealerPoints}</div>\n      </div>\n      {\n        isDealerWon !== undefined ?\n        <div style={{padding: \"1rem\"}}>\n          Winner is:&nbsp;\n          <span>{isDealerWon ? \"Dealer\" : \"Player\"}</span>\n        </div> : <></>\n      }\n      <p> \n      Rules: <br />\n      -  1. shuffle the deck <br />\n      -  2. hand out 2 cards each to dealer and player <br />\n      -  2. prompt player for actions (hit, stand) <br />\n      -  3. dealer(computer) decides to draw until at least 17 points <br />\n      -  4. determine who wins the round <br />\n      Assumptions : <br />\n      * Poker Cards only <br />\n      * Rank: (A, 2-10, J,Q, K), <br />\n      * Suit : (Spade, Heart, Club, Diamond) <br />\n      * A Deck of poker cards: 52(13 rank * 4 suit) possible unique card combination,  <br />\n      it's a game trying to make your hand closest to 21 points but exceeding 21 means\n      game over, whoever is highest below 22 points wins\n      * assume that there's only 1 dealer and 1 player <br />\n      * 2-10: 2-10 points <br />\n      * J,Q,K: 10 points <br />\n      * A : 11/1 point (can be 11 or 1 points) <br />\n      </p>\n      <style jsx>{`\n        .blackjack {\n          border: 1px solid #ccc;\n          border-radius: 5px;\n          box-shadow: 2px 2px 6px 2px #eee;\n        }\n\n        .blackjack .title {\n          padding: 1rem;\n        }\n\n        .blackjack button {\n          padding: .35rem 1.5rem;\n          border-radius: 5px;\n          font-weight: bold;\n        }\n\n        .blackjack button:focus, button:hover {\n          outline: none;\n        }\n\n        .blackjack p {\n          text-align: left;\n          font-size: 14px;\n          color: #949494;\n          padding: 1rem;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport const random1to13 = () => {\n  // 10 because hishest possible outcome can be 10.\n  return Math.ceil(Math.random()*10);\n}","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Products from './components/products/Products';\nimport Blackjack from 'components/blackjack/Blackjack';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <header>\n          <h1>Mobile Zone</h1>\n          <ul>\n            <li>\n              <Link className=\"App-link\" to=\"/blackjack\">Blackjack</Link>\n            </li>\n            <li>\n              <Link className=\"App-link\" to=\"/products\">Products</Link>\n            </li>\n          </ul>\n          <hr />\n        </header>\n        <main>\n          <Switch>\n            <Route exact path=\"/\">\n              <Blackjack />\n            </Route>\n            <Route path=\"/products\">\n              <Products />\n            </Route>\n            <Route path=\"/blackjack\">\n              <Blackjack />\n            </Route>\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}